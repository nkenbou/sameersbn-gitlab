user www-data;
daemon off;

env REDIS_PORT_6379_TCP_ADDR;
env REDIS_PORT_6379_TCP_PORT;

events {
    worker_connections 768;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80 default_server;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443;
        ssl on;
        ssl_certificate     cert.crt;
        ssl_certificate_key cert.key;
        ssl_dhparam         dhparam.pem;
        root /usr/share/nginx/html;
        index index.html index.htm;

        location / {
            set $upstream "";

            rewrite_by_lua '
                local redis = require "nginx.redis"
                local client = redis:new()

                local redis_host = os.getenv("REDIS_PORT_6379_TCP_ADDR")
                local redis_port = os.getenv("REDIS_PORT_6379_TCP_PORT")
                local ok, err = client:connect(redis_host, redis_port)
                if not ok then
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                subdomain, _ = string.gsub(ngx.var.host, "([^%.]+)%..*", "%1")
                local res, err = client:get(subdomain)
                if err then
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end
                if res == ngx.null then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                else
                    ngx.var.upstream = res
                end
            ';

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://$upstream;
        }
    }
}
